#!/bin/bash

#------------------------------------------------------------------------------
# Configure the service:
#------------------------------------------------------------------------------

echo '[Init] Configuring the service...'

JENKINS_HOME='/var/lib/jenkins'
CONFIG_FILE="${JENKINS_HOME}_staging/config.xml"
LOCATION_CONF="${JENKINS_HOME}_staging/jenkins.model.JenkinsLocationConfiguration.xml"

# Use Marathon provided port if JENKINS_HTTPPORT is not set by user:
[ "${PORT0}" ] && [ ! "${JENKINS_HTTPPORT}" ] && JENKINS_HTTPPORT=${PORT0}

# Set versions:
sed -i "s#XXX-JENKINS_VERSION-XXX#${JENKINS_VERSION}#" ${CONFIG_FILE}
sed -i "s#XXX-JENKINS_MESOS_VERSION-XXX#${JENKINS_MESOS_VERSION}#" ${CONFIG_FILE}

# Set the Mesos master:
MESOS_MASTER="${MESOS_MASTER:-'zk://zk1:2181,zk2:2181,zk3:2181/mesos'}" && \
sed -i "s#XXX-MESOS_MASTER-XXX#${MESOS_MASTER}#" ${CONFIG_FILE}

# Set the Mesos framework name:
MESOS_FRAMEWORK_NAME="${MESOS_FRAMEWORK_NAME:-'jenkins'}" && \
sed -i "s/XXX-MESOS_FRAMEWORK_NAME-XXX/${MESOS_FRAMEWORK_NAME}/" ${CONFIG_FILE}

# Set whether to enable Mesos checkpointing or not:
MESOS_CHECKPOINT="${MESOS_CHECKPOINT:-'false'}" && \
sed -i "s/XXX-MESOS_CHECKPOINT-XXX/${MESOS_CHECKPOINT}/" ${CONFIG_FILE}

# Set whether to use Mesos framework on-demand registration:
MESOS_ON_DEMAND_REGISTRATION="${MESOS_ON_DEMAND_REGISTRATION:-'false'}" && \
sed -i "s/XXX-MESOS_ON_DEMAND_REGISTRATION-XXX/${MESOS_ON_DEMAND_REGISTRATION}/" ${CONFIG_FILE}

# Set idle termination minutes:
MESOS_IDLE_TERMINATION_MINUTES="${MESOS_IDLE_TERMINATION_MINUTES:-'3'}" && \
sed -i "s/XXX-MESOS_IDLE_TERMINATION_MINUTES-XXX/${MESOS_IDLE_TERMINATION_MINUTES}/" ${CONFIG_FILE}

# Set the Jenkins system message:
JENKINS_SYSTEM_MESSAGE="${JENKINS_SYSTEM_MESSAGE:-'Jenkins master'}" && \
sed -i "s/XXX-JENKINS_SYSTEM_MESSAGE-XXX/${JENKINS_SYSTEM_MESSAGE}/" ${CONFIG_FILE}

# Set the Jenkins URL:
JENKINS_URL="http://${HOST:-$(hostname -i)}:${JENKINS_HTTPPORT}" && \
sed -i "s#XXX-JENKINS_URL-XXX#${JENKINS_URL}#" ${CONFIG_FILE}
sed -i "s#XXX-JENKINS_URL-XXX#${JENKINS_URL}#" ${LOCATION_CONF}

# Set admin email:
JENKINS_ADMIN_EMAIL="${JENKINS_ADMIN_EMAIL:-'address not configured yet'}"
sed -i "s#XXX-JENKINS_ADMIN_EMAIL-XXX#${JENKINS_ADMIN_EMAIL}#" ${LOCATION_CONF}

# Populate JENKINS_HOME if empty:
[ "$(ls -A ${JENKINS_HOME})" ] && cp ${CONFIG_FILE} ${LOCATION_CONF} ${JENKINS_HOME} || \
cp -R ${JENKINS_HOME}_staging/* ${JENKINS_HOME}/

#------------------------------------------------------------------------------
# Run:
#------------------------------------------------------------------------------

# Set Java commandline options:
JAVA_OPTS="
-DJENKINS_HOME=/var/lib/jenkins
-Dhudson.slaves.NodeProvisioner.MARGIN=${JENKINS_NODE_PROVISIONER_MARGIN:-'10'}
-Dhudson.slaves.NodeProvisioner.MARGIN0=${JENKINS_NODE_PROVISIONER_MARGIN0:-'0.5'}"

# Set Jenkins commandline options:
JENKINS_OPTS="
--webroot=${JENKINS_WEBROOT:-'/var/cache/jenkins/war'}
--httpPort=${JENKINS_HTTPPORT:-8080}
--ajp13Port=${JENKINS_AJP13PORT:-8009}
--debug=${JENKINS_DEBUG:-5}
--handlerCountMax=${JENKINS_HANDLER_COUNT_MAX:-100}
--handlerCountMaxIdle=${JENKINS_HANDLER_COUNT_MAX_IDLE:-20}"

echo '[Init] Executing Jenkins'
exec /usr/bin/java ${JAVA_OPTS} -jar /usr/lib/jenkins/jenkins.war ${JENKINS_OPTS}
